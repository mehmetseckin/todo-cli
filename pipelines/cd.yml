variables:
  version: '0.2.0'

name: $(version)$(rev:.r)

trigger:
- master

stages:
- stage: 'test'
  displayName: 'Run Tests'
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    buildConfiguration: 'Release'
    solutionFile: $(Build.SourcesDirectory)/src/Todo.CLI.sln
  jobs:
  - job: 'test_job'
    steps:
    - task: UseDotNet@2
      inputs:
        version: '8.0.x'
        includePreviewVersions: false

    - script: |
        dotnet restore "$(solutionFile)"
        dotnet test "$(solutionFile)" -c $(buildConfiguration) --logger trx --results-directory "$(Agent.TempDirectory)/TestResults"
      displayName: 'Run unit tests'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testRunner: VSTest
        testResultsFiles: '$(Agent.TempDirectory)/TestResults/*.trx'
        testRunTitle: 'Unit Tests'

- template: templates/stages/build.yml
  parameters:
    name: 'win_x64'
    runtimeIdentifier: 'win-x64'
    vmImage: 'windows-latest'
    dependsOn: ['test']
- template: templates/stages/build.yml
  parameters:
    name: 'linux_x64'
    runtimeIdentifier: 'linux-x64'
    vmImage: 'ubuntu-latest'
    dependsOn: ['test']
- template: templates/stages/build.yml
  parameters:
    name: 'osx_x64'
    runtimeIdentifier: 'osx-x64'
    vmImage: 'macos-latest'
    dependsOn: ['test']
- template: templates/stages/build.yml
  parameters:
    name: 'osx_arm64'
    runtimeIdentifier: 'osx-arm64'
    vmImage: 'macos-latest'
    dependsOn: ['test']
- stage: 'Release'
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    artifactsDirectory: '$(Pipeline.Workspace)/artifacts'
    win_x64_artifactPath: '$(artifactsDirectory)/todo.$(build.buildNumber).win-x64'
    linux_x64_artifactPath: '$(artifactsDirectory)/todo.$(build.buildNumber).linux-x64'
    osx_x64_artifactPath: '$(artifactsDirectory)/todo.$(build.buildNumber).osx-x64'
    osx_arm64_artifactPath: '$(artifactsDirectory)/todo.$(build.buildNumber).osx-arm64'
  dependsOn: ['build_win_x64', 'build_linux_x64', 'build_osx_x64', 'build_osx_arm64']
  jobs:
  - job: 'release_job'
    steps:
    - script: mkdir -p $(artifactsDirectory)
      displayName: 'Create $(artifactsDirectory) directory'
    - task: DownloadPipelineArtifact@2
      displayName: 'Download all artifacts'
      inputs:
        targetPath: '$(artifactsDirectory)'
    - task: ArchiveFiles@2
      displayName: 'Create $(win_x64_artifactPath).zip'
      inputs:
        rootFolderOrFile: '$(win_x64_artifactPath)' 
        includeRootFolder: false 
        archiveFile: '$(win_x64_artifactPath).zip' 
    - task: ArchiveFiles@2
      displayName: 'Create $(linux_x64_artifactPath).tar.gz'
      inputs:
        rootFolderOrFile: '$(linux_x64_artifactPath)' 
        includeRootFolder: false 
        archiveFile: '$(linux_x64_artifactPath).tar.gz' 
        archiveType: 'tar'
        tarCompression: 'gz'
    - task: ArchiveFiles@2
      displayName: 'Create $(osx_x64_artifactPath).tar.gz'
      inputs:
        rootFolderOrFile: '$(osx_x64_artifactPath)' 
        includeRootFolder: false 
        archiveFile: '$(osx_x64_artifactPath).tar.gz' 
        archiveType: 'tar'
        tarCompression: 'gz'
    - task: ArchiveFiles@2
      displayName: 'Create $(osx_arm64_artifactPath).tar.gz'
      inputs:
        rootFolderOrFile: '$(osx_arm64_artifactPath)' 
        includeRootFolder: false 
        archiveFile: '$(osx_arm64_artifactPath).tar.gz' 
        archiveType: 'tar'
        tarCompression: 'gz'
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'azure-pipelines-github-release'
        repositoryName: '$(Build.Repository.Name)'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        assets: |
          $(artifactsDirectory)/*.zip
          $(artifactsDirectory)/*.tar.gz
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        isPreRelease: true
