parameters:
  name: ''
  runtimeIdentifier: 'win-x64'
  vmImage: 'windows-latest'
  dependsOn: []

stages:
- stage: 'build_${{ parameters.name }}'
  displayName: 'Build ${{ parameters.runtimeIdentifier }}'
  dependsOn: ${{ parameters.dependsOn }}

  variables:
    buildConfiguration: 'Release'
    solutionFile: $(Build.SourcesDirectory)/src/Todo.CLI.sln
    projectDirectory: $(Build.SourcesDirectory)/src/Todo.CLI
    outputDirectory: $(Build.ArtifactStagingDirectory)/${{ parameters.runtimeIdentifier }}
    artifactName: 'todo.$(Build.BuildNumber).${{ parameters.runtimeIdentifier }}'

  jobs:
  - job: 'publish_${{ parameters.name }}_job'
    pool:
      vmImage: ${{ parameters.vmImage }}
    steps:
    - task: UseDotNet@2
      inputs:
        version: '8.0.x'
        includePreviewVersions: false

    # Windows Build
    - script: |
        dotnet restore "$(projectDirectory)"
        dotnet publish "$(projectDirectory)" ^
          -c $(buildConfiguration) ^
          -r ${{ parameters.runtimeIdentifier }} ^
          -o "$(outputDirectory)" ^
          /p:Version=$(Build.BuildNumber) ^
          /p:PublishSingleFile=true ^
          /p:PublishTrimmed=true ^
          /p:IncludeNativeLibrariesForSelfExtract=true ^
          /p:EnableCompressionInSingleFile=true ^
          /p:DebugType=embedded ^
          --self-contained true
      displayName: 'Publish as self-contained executable for Windows'
      condition: eq('${{ parameters.runtimeIdentifier }}', 'win-x64')

    # macOS Build
    - script: |
        dotnet restore "$(projectDirectory)"
        dotnet publish "$(projectDirectory)" \
          -c $(buildConfiguration) \
          -r ${{ parameters.runtimeIdentifier }} \
          -o "$(outputDirectory)" \
          /p:Version=$(Build.BuildNumber) \
          /p:PublishSingleFile=true \
          /p:PublishTrimmed=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:EnableCompressionInSingleFile=true \
          /p:DebugType=embedded \
          --self-contained true
        dotnet msbuild "$(projectDirectory)" \
          -t:BundleApp \
          -p:RuntimeIdentifier=${{ parameters.runtimeIdentifier }} \
          -p:Configuration=$(buildConfiguration) \
          -p:PublishDir="$(outputDirectory)" \
          -p:CFBundleShortVersionString=$(Build.BuildNumber) \
          -p:CFBundleVersion=$(Build.BuildNumber)
      displayName: 'Publish as macOS app bundle'
      condition: or(eq('${{ parameters.runtimeIdentifier }}', 'osx-x64'), eq('${{ parameters.runtimeIdentifier }}', 'osx-arm64'))

    # Linux Build
    - script: |
        dotnet restore "$(projectDirectory)"
        dotnet publish "$(projectDirectory)" \
          -c $(buildConfiguration) \
          -r ${{ parameters.runtimeIdentifier }} \
          -o "$(outputDirectory)" \
          /p:Version=$(Build.BuildNumber) \
          /p:PublishSingleFile=true \
          /p:PublishTrimmed=true \
          /p:IncludeNativeLibrariesForSelfExtract=true \
          /p:EnableCompressionInSingleFile=true \
          /p:DebugType=embedded \
          --self-contained true
        mkdir -p "$(outputDirectory)/usr/share/applications"
        cp "$(Build.SourcesDirectory)/assets/todo-cli.desktop" "$(outputDirectory)/usr/share/applications/"
        mkdir -p "$(outputDirectory)/usr/share/icons/hicolor/scalable/apps"
        cp "$(Build.SourcesDirectory)/assets/logo.png" "$(outputDirectory)/usr/share/icons/hicolor/scalable/apps/todo-cli.png"
      displayName: 'Publish as Linux executable with desktop integration'
      condition: eq('${{ parameters.runtimeIdentifier }}', 'linux-x64')

    - publish: '$(outputDirectory)'
      displayName: 'Publish artifact for ${{ parameters.runtimeIdentifier }}'
      artifact: '$(artifactName)'
